name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '24.1.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Test Job - Runs on all PRs and pushes
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 TypeScript check
        run: npm run type-check

      - name: 🎨 Lint code
        run: npm run lint

      - name: 🧹 Format check
        run: npm run format:check

      - name: 🧪 Unit tests
        run: npm run test:run

      - name: 📊 Generate coverage report
        run: npm run test:coverage

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella

  # 🎭 E2E Tests
  e2e-test:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🏗️ Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL_TEST }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY_TEST }}

      - name: 🎭 Run E2E tests
        run: npm run test:e2e

      - name: 📸 Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # 🏗️ Build Job - Creates artifacts
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.event_name != 'pull_request'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏷️ Generate version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION=${{ github.event.release.tag_name }}
          else
            VERSION=$(node -p "require('./package.json').version")-rc-$(echo ${{ github.sha }} | cut -c1-7)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: 🏗️ Build for production
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_APP_VERSION: ${{ steps.version.outputs.version }}
          VITE_APP_ENVIRONMENT: ${{ github.event_name == 'release' && 'production' || 'staging' }}

      - name: 📦 Create artifact
        run: |
          cd dist
          tar -czf ../hackhub-${{ steps.version.outputs.version }}.tar.gz .

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: hackhub-${{ steps.version.outputs.version }}
          path: |
            dist/
            hackhub-${{ steps.version.outputs.version }}.tar.gz
          retention-days: 90

  # 🚀 Deploy to Staging - Runs on main branch pushes
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: staging
      url: https://hackhub-staging.vercel.app
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: hackhub-${{ needs.build.outputs.version }}
          path: dist/

      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          vercel-args: '--prebuilt'

  # 🎯 Deploy to Production - Runs on releases
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: 
      name: production
      url: https://hackhub.yourdomain.com
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: hackhub-${{ needs.build.outputs.version }}
          path: dist/

      - name: 🎯 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          vercel-args: '--prebuilt --prod'

      - name: 🏷️ Create GitHub Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./hackhub-${{ needs.build.outputs.version }}.tar.gz
          asset_name: hackhub-${{ needs.build.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  # 🔐 Security Scan
  security:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Run security audit
        run: npm audit --audit-level moderate

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # 📊 Performance Testing
  lighthouse:
    name: 📊 Lighthouse Performance
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: hackhub-${{ needs.build.outputs.version }}
          path: dist/

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🌐 Serve static files
        run: |
          npm install -g serve
          serve -s dist -p 3000 &
          sleep 5

      - name: 📊 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          temporaryPublicStorage: true

  # 🏷️ Auto-tag releases on main
  auto-tag:
    name: 🏷️ Auto Tag Release
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Bump version and create tag
        uses: anothrNick/github-tag-action@1.64.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: main
          TAG_CONTEXT: branch

  # 🧹 Cleanup old artifacts
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production]
    
    steps:
      - name: 🗑️ Delete old artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            hackhub-*-rc-*
          skipIfNotFound: true
          failOnError: false

# Workflow status notification
  notify:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    if: always()
    needs: [test, e2e-test, build, deploy-staging, deploy-production]
    
    steps:
      - name: 📢 Workflow Status
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Workflow completed successfully!"
          else
            echo "❌ Workflow failed. Check the logs for details."
          fi
